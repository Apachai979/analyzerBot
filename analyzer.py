import pandas as pd
from data_fetcher import get_orderbook_data
from config import *

def calculate_rsi(data, period=14):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI"""
    delta = data['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def calculate_sma(data, period):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç SMA –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    return data['close'].rolling(window=period).mean()

def calculate_volatility_stats(df, fast_period, slow_period, lookback_periods):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É SMA"""
    if len(df) < slow_period + lookback_periods:
        return None, None, None, None, None
    
    df['sma_fast'] = calculate_sma(df, fast_period)
    df['sma_slow'] = calculate_sma(df, slow_period)
    
    df_clean = df.dropna(subset=['sma_fast', 'sma_slow']).copy()
    df_clean['sma_distance_pct'] = ((df_clean['sma_fast'] - df_clean['sma_slow']) / df_clean['sma_slow']) * 100
    
    recent_data = df_clean['sma_distance_pct'].tail(lookback_periods)
    
    mean_distance = recent_data.mean()
    std_distance = recent_data.std()
    max_distance = recent_data.max()
    min_distance = recent_data.min()
    current_distance = df_clean['sma_distance_pct'].iloc[-1]
    
    return current_distance, mean_distance, std_distance, max_distance, min_distance

def analyze_market_data(market_data, symbol):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinMarketCap"""
    if not market_data:
        return 0
    
    print(f"\nüìà COINMARKETCAP ANALYSIS: {symbol}")
    print("‚îÄ" * 40)
    
    ratio = market_data['volume_mcap_ratio']
    print(f"üîÑ Volume/MCap Ratio: {ratio:.2%}")
    
    score = 0
    
    if ratio > 0.1:
        print("   üöÄ –í–´–°–û–ö–ê–Ø –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –∞–∫—Ç–∏–≤ –ø–æ–ø—É–ª—è—Ä–µ–Ω")
        score += 25
    elif ratio > 0.05:
        print("   üìä –•–û–†–û–®–ê–Ø –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å") 
        score += 15
    elif ratio > 0.02:
        print("   ‚ö™ –£–ú–ï–†–ï–ù–ù–ê–Ø –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
        score += 5
    else:
        print("   üí§ –ù–ò–ó–ö–ê–Ø –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏")
    
    print(f"üí∞ Market Cap: ${market_data['market_cap']:,.0f}")
    print(f"üìä 24h Volume: ${market_data['volume_24h']:,.0f}")
    print(f"üìâ 24h Volume Change: {market_data['volume_change_24h']:+.2f}%")
    print(f"üìà 24h Market Cap Change: {market_data['market_cap_change_24h']:+.2f}%")
    
    if market_data['volume_change_24h'] > 5:
        score += 10
        print("   üìà –û–±—ä–µ–º —Ä–∞—Å—Ç–µ—Ç - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
    
    if market_data['market_cap_change_24h'] > 2:
        score += 10
        print("   üíπ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ç–µ—Ç - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
    
    print(f"üéØ CMC Score: {score}/45")
    
    return min(45, score)

def analyze_fear_greed(fgi_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Fear and Greed Index –∏ –≤—ã–¥–∞–µ—Ç –∏–Ω—Å–∞–π—Ç—ã"""
    if not fgi_data:
        return 0
    
    current_value = fgi_data['current_value']
    classification = fgi_data['current_classification']
    average_30d = fgi_data['average_30d']
    
    print(f"\nüò®üòä FEAR AND GREED INDEX")
    print("‚îÄ" * 40)
    print(f"üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value} - {classification}")
    print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π: {average_30d:.1f}")
    
    score = 0
    insights = []
    
    if current_value >= 80:
        insights.append("üö® –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –ñ–ê–î–ù–û–°–¢–¨ - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑")
        score -= 15
    elif current_value >= 60:
        insights.append("üìà –ñ–ê–î–ù–û–°–¢–¨ - —Ä—ã–Ω–æ–∫ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ–Ω")
        score -= 5
    elif current_value >= 40:
        insights.append("‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–û - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏")
        score += 5
    elif current_value >= 20:
        insights.append("üìâ –°–¢–†–ê–• - —Ä—ã–Ω–æ–∫ –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–µ–Ω")
        score += 10
    else:
        insights.append("üö® –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –°–¢–†–ê–• - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö")
        score += 20
    
    deviation = current_value - average_30d
    if abs(deviation) > 20:
        insights.append("üìä –°–∏–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è")
        if deviation < 0:
            score += 10
        else:
            score -= 10
    
    for insight in insights:
        print(f"   {insight}")
    
    print(f"üéØ FGI Score: {score}/25")
    
    return min(25, max(-25, score))

def analyze_orderbook(bids, asks, bid_volume, ask_volume, whale_bids, whale_asks, current_price, config):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–∫–∞–Ω —Ü–µ–Ω"""
    if not bids or not asks:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞")
        return
    
    print(f"\nüìä ORDER BOOK ANALYSIS ({config.orderbook_levels} —É—Ä–æ–≤–Ω–µ–π)")
    print("‚îÄ" * 50)
    print(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: WHALE_SIZE={config.whale_size:,}, –£—Ä–æ–≤–Ω–µ–π={config.orderbook_levels}")
    
    if ask_volume > 0:
        liquidity_ratio = bid_volume / ask_volume
        print(f"üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: {liquidity_ratio:.2f}")
        
        if liquidity_ratio > 2.0:
            print("   üü¢ –°–ò–õ–¨–ù–´–ï –ü–û–ö–£–ü–ê–¢–ï–õ–ò - –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç bids")
        elif liquidity_ratio > 1.5:
            print("   üü° –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏")
        elif liquidity_ratio > 0.8:
            print("   ‚ö™ –ë–ê–õ–ê–ù–° - –ø–∞—Ä–∏—Ç–µ—Ç —Å–∏–ª")
        elif liquidity_ratio > 0.5:
            print("   üü† –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã")
        else:
            print("   üî¥ –°–ò–õ–¨–ù–´–ï –ü–†–û–î–ê–í–¶–´ - –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç asks")
    
    print(f"üêã –ö—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ (> {config.whale_size:,}): {len(whale_bids)} bids, {len(whale_asks)} asks")
    
    if whale_bids:
        print(f"   üü¢ –ö–∏—Ç—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏: {', '.join([f'{float(b[1]):.0f}@{b[0]}' for b in whale_bids[:3]])}")
    if whale_asks:
        print(f"   üî¥ –ö–∏—Ç—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {', '.join([f'{float(a[1]):.0f}@{a[0]}' for a in whale_asks[:3]])}")

def analyze_sma_signals(df, current_price, symbol, config, cmc_score=0, fgi_score=0):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—á–µ—Ç–æ–º CMC –∏ Fear and Greed Index"""
    if df is None or len(df) < SLOW_PERIOD:
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return None
    
    result = calculate_volatility_stats(df, FAST_PERIOD, SLOW_PERIOD, VOLATILITY_LOOKBACK)
    if result[0] is None:
        return None
        
    current_dist, mean_dist, std_dist, max_dist, min_dist = result
    
    df['sma_fast'] = calculate_sma(df, FAST_PERIOD)
    df['sma_slow'] = calculate_sma(df, SLOW_PERIOD)
    current_sma_fast = df['sma_fast'].iloc[-1]
    current_sma_slow = df['sma_slow'].iloc[-1]
    previous_sma_fast = df['sma_fast'].iloc[-2]
    previous_sma_slow = df['sma_slow'].iloc[-2]
    
    print(f"\n=== –ê–ù–ê–õ–ò–ó –î–õ–Ø {symbol} ===")
    print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}")
    print(f"SMA{FAST_PERIOD}: {current_sma_fast:.2f}")
    print(f"SMA{SLOW_PERIOD}: {current_sma_slow:.2f}")
    print(f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É SMA: {current_dist:+.2f}%")
    print(f"–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {VOLATILITY_LOOKBACK} –±–∞—Ä–æ–≤")
    
    if std_dist > 0:
        z_score = (current_dist - mean_dist) / std_dist
        print(f"Z-score —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {z_score:+.2f}")
        
        if abs(z_score) < 0.5:
            print("üìä –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ near –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –Ω–æ—Ä–º—ã")
        elif abs(z_score) < 1.5:
            print("‚ö†Ô∏è  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–º–µ—Ä–µ–Ω–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –Ω–æ—Ä–º—ã")
        else:
            print("üö® –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ! –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è")
    
    print(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: [{min_dist:+.2f}%, {max_dist:+.2f}%]")
    
    signal = "NEUTRAL"
    if previous_sma_fast < previous_sma_slow and current_sma_fast > current_sma_slow:
        print("üéØ –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò: –ó–æ–ª–æ—Ç–æ–π –∫—Ä–µ—Å—Ç")
        signal = "BUY"
    elif previous_sma_fast > previous_sma_slow and current_sma_fast < current_sma_slow:
        print("üéØ –°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–ò: –ú–µ—Ä—Ç–≤—ã–π –∫—Ä–µ—Å—Ç")
        signal = "SELL"
    else:
        print("üìä –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è SMA –Ω–µ—Ç - —Å–∏–≥–Ω–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if current_price > current_sma_slow:
        print("üìà –¶–µ–Ω–∞ –≤—ã—à–µ SMA50 - –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        trend = "BULLISH"
    else:
        print("üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA50 - –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        trend = "BEARISH"
    
    df['volume_ma'] = df['volume'].rolling(window=VOLUME_MA_PERIOD).mean()
    current_volume = df['volume'].iloc[-1]
    avg_volume = df['volume_ma'].iloc[-1]
    volume_ratio = current_volume / avg_volume
    
    print(f"üìä –û–±—ä–µ–º: {current_volume:.0f} vs —Å—Ä–µ–¥–Ω–∏–π {avg_volume:.0f} (x{volume_ratio:.1f})")
    if volume_ratio > 2.0:
        print("üöÄ –í–´–°–û–ö–ò–ô –û–ë–™–ï–ú! –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    elif volume_ratio < 0.5:
        print("‚ö†Ô∏è  –ù–ò–ó–ö–ò–ô –û–ë–™–ï–ú! –î–≤–∏–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    
    df['rsi'] = calculate_rsi(df, RSI_PERIOD)
    current_rsi = df['rsi'].iloc[-1]
    print(f"üì∂ RSI({RSI_PERIOD}): {current_rsi:.1f}")
    
    if current_rsi > 70:
        print("üéØ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (RSI > 70)")
    elif current_rsi < 30:
        print("üéØ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (RSI < 30)")
    
    tech_score = 0
    
    if current_dist < -2.5: 
        tech_score += 20
        print("   üìâ +20 –æ—á–∫–æ–≤: –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø–æ SMA")
    elif current_dist < -1.5:
        tech_score += 12
        print("   üìâ +12 –æ—á–∫–æ–≤: –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø–æ SMA")
    elif current_dist < -0.5:
        tech_score += 5
        print("   üìâ +5 –æ—á–∫–æ–≤: –õ–µ–≥–∫–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø–æ SMA")
    elif current_dist > 2.5:
        tech_score -= 10
        print("   üìà -10 –æ—á–∫–æ–≤: –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ SMA")
    elif current_dist > 1.5:
        tech_score -= 5
        print("   üìà -5 –æ—á–∫–æ–≤: –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ SMA")
        
    if current_rsi < 30:
        tech_score += 15
        print("   üì∂ +15 –æ—á–∫–æ–≤: –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø–æ RSI")
    elif current_rsi < 35:
        tech_score += 10
        print("   üì∂ +10 –æ—á–∫–æ–≤: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø–æ RSI")
    elif current_rsi < 40:
        tech_score += 5
        print("   üì∂ +5 –æ—á–∫–æ–≤: –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ RSI")
    elif current_rsi > 70:
        tech_score -= 10
        print("   üì∂ -10 –æ—á–∫–æ–≤: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ RSI")
    elif current_rsi > 65:
        tech_score -= 5
        print("   üì∂ -5 –æ—á–∫–æ–≤: –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ RSI")
        
    if volume_ratio > 2.0:
        tech_score += 10
        print("   üìä +10 –æ—á–∫–æ–≤: –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ")
    elif volume_ratio > 1.2:
        tech_score += 5
        print("   üìä +5 –æ—á–∫–æ–≤: –•–æ—Ä–æ—à–∏–π –æ–±—ä–µ–º")
    elif volume_ratio < 0.5:
        tech_score -= 5
        print("   üìä -5 –æ—á–∫–æ–≤: –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º")
        
    if current_price > current_sma_slow:
        tech_score += 10
        print("   üìà +10 –æ—á–∫–æ–≤: –¶–µ–Ω–∞ –≤—ã—à–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞")
    else:
        print("   üìâ +0 –æ—á–∫–æ–≤: –¶–µ–Ω–∞ –Ω–∏–∂–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞")
    
    cmc_score_limited = min(25, max(0, cmc_score))
    print(f"   üåê +{cmc_score_limited} –æ—á–∫–æ–≤: CoinMarketCap –∞–Ω–∞–ª–∏–∑")
    
    fgi_positive_score = max(0, fgi_score)
    fgi_score_limited = min(20, fgi_positive_score)
    print(f"   üò®üòä +{fgi_score_limited} –æ—á–∫–æ–≤: Fear and Greed Index")
    
    bonus_score = 0
    if signal == "BUY" and current_dist < -2.0 and current_rsi < 35 and fgi_score > 15:
        bonus_score = 10
        print("   üéØ +10 –æ—á–∫–æ–≤: –°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π –∫–æ–Ω—Ñ–∏—Ä–º–∞—Ü–∏—è")
    elif signal == "SELL" and current_dist > 2.0 and current_rsi > 65 and fgi_score < -15:
        bonus_score = 10
        print("   üéØ +10 –æ—á–∫–æ–≤: –°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π –∫–æ–Ω—Ñ–∏—Ä–º–∞—Ü–∏—è")
    
    total_score = tech_score + cmc_score_limited + fgi_score_limited + bonus_score
    final_score = max(0, min(100, total_score))
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô SCORE: {final_score}/100")
    print(f"   üìä –¢–µ—Ö. –∞–Ω–∞–ª–∏–∑: {tech_score}/55")
    print(f"   üåê CMC: {cmc_score_limited}/25") 
    print(f"   üò®üòä FGI: {fgi_score_limited}/20")
    if bonus_score > 0:
        print(f"   üéØ –ë–æ–Ω—É—Å: {bonus_score}/10")
    
    if final_score >= 80:
        print("   üí™ –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ - –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
    elif final_score >= 60:
        print("   üëç –•–û–†–û–®–ò–ô –°–ò–ì–ù–ê–õ - —É–º–µ—Ä–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
    elif final_score >= 40:
        print("   ü§î –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ - –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
    else:
        print("   ‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–û - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    return {
        'signal': signal,
        'score': final_score,
        'trend': trend,
        'rsi': current_rsi,
        'volume_ratio': volume_ratio,
        'sma_distance': current_dist,
        'tech_score': tech_score,
        'cmc_score': cmc_score_limited,
        'fgi_score': fgi_score_limited,
        'bonus_score': bonus_score
    }

def print_summary_table(results):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º"""
    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\nüéØ –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 90)
    print(f"{'–ú–æ–Ω–µ—Ç–∞':<10} {'–¶–µ–Ω–∞':<12} {'–°–∏–≥–Ω–∞–ª':<10} {'–û–±—â':<4} {'CMC':<4} {'FGI':<4} {'–î–µ–π—Å—Ç–≤–∏–µ':<20}")
    print("-" * 90)
    
    for result in sorted(results, key=lambda x: x['score'], reverse=True):
        symbol = result['symbol']
        price = result['price']
        signal = result['signal']
        score = result['score']
        cmc_score = result.get('cmc_score', 0)
        fgi_score = result.get('fgi_score', 0)
        
        action = "–ñ–î–ê–¢–¨"
        if signal == "BUY" and score > 70:
            action = "üöÄ –°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê"
        elif signal == "BUY" and score > 50:
            action = "üìà –ü–û–ö–£–ü–ö–ê"
        elif signal == "SELL" and score > 70:
            action = "üîª –°–ò–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê"
        elif signal == "SELL" and score > 50:
            action = "üìâ –ü–†–û–î–ê–ñA"
        
        print(f"{symbol:<10} ${price:<11.4f} {signal:<10} {score:<4} {cmc_score:<4} {fgi_score:<4} {action:<20}")
    
    print("-" * 90)
    
    buy_signals = sum(1 for r in results if r['signal'] == 'BUY')
    sell_signals = sum(1 for r in results if r['signal'] == 'SELL')
    neutral_signals = len(results) - buy_signals - sell_signals
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üü¢ {buy_signals} | üî¥ {sell_signals} | ‚ö™ {neutral_signals}")